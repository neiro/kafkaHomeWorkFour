version: "3.8"
services:

  cert-generator:
    build:
      context: .
      dockerfile: Dockerfile.cert
    container_name: cert-generator  
    restart: always  
    volumes:
      - ./certs:/var/ssl/private
    environment:
      CA_PASSWORD: ${CA_PASSWORD}
    networks:
      - kafka_net
    

  kafka-acl-init:
    build:
      context: .
      dockerfile: Dockerfile.app
    container_name: java-app      
    restart: always
    volumes:
      - ./certs/producer:/var/ssl/private
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka1:9093,kafka2:9093,kafka3:9093"
      SECURITY_PROTOCOL: "SASL_SSL"
      SASL_MECHANISM: PLAIN
      SSL_TRUSTSTORE_LOCATION: "/var/ssl/private/producer.truststore.jks"
      SSL_TRUSTSTORE_PASSWORD: "changeit"
      SSL_KEYSTORE_LOCATION: "/var/ssl/private/producer.keystore.jks"
      SSL_KEYSTORE_PASSWORD: "changeit"
      SSL_KEY_PASSWORD: "changeit"
      kafka__bootstrap_servers: "kafka1:9093,kafka2:9093,kafka3:9093"
    depends_on:
      # - cert-generator
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka_net



  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SASL_ENABLED: "true"
      ZOOKEEPER_AUTH_PROVIDER_1: "org.apache.zookeeper.server.auth.SASLAuthenticationProvider"
      ZOOKEEPER_REQUIRE_CLIENT_AUTH_SCHEME: "sasl"
      ZOOKEEPER_SASL_ENABLE: "true"
      ZOOKEEPER_SASL_SERVER_CONF: "/etc/zookeeper/conf/zookeeper.sasl.jaas.conf"
      # РЈРєР°Р·С‹РІР°РµРј РїСѓС‚СЊ Рє JAAS-РєРѕРЅС„РёРіСѓСЂР°С†РёРё РґР»СЏ ZooKeeper
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/zookeeper/secrets/zookeeper.sasl.jaas.conf -Dzookeeper.allowSaslFailedClients=false -Dzookeeper.requireClientAuthScheme=sasl"
    volumes:
      - ./certs:/etc/zookeeper/secrets:ro
    networks:
      - kafka_net
    # command: >
    #   bash -c "
    #   /etc/confluent/docker/run & 
    #   sleep 5;
    #   zookeeper-shell localhost:2181 <<EOF
    #   setAcl / sasl:kafka1:cdrwa, sasl:kafka2:cdrwa, sasl:kafka3:cdrwa
    #   setAcl /brokers sasl:kafka1:cdrwa, sasl:kafka2:cdrwa, sasl:kafka3:cdrwa
    #   setAcl /brokers/ids sasl:kafka1:cdrwa, sasl:kafka2:cdrwa, sasl:kafka3:cdrwa
    #   EOF
    #   wait
    #   "

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # РСЃРїРѕР»СЊР·СѓРµРј SASL_SSL РґР»СЏ Р·Р°С‰РёС‰С‘РЅРЅС‹С… РїРѕРґРєР»СЋС‡РµРЅРёР№ РєР»РёРµРЅС‚РѕРІ
      KAFKA_LISTENERS: SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      # SSL РЅР°СЃС‚СЂРѕР№РєРё вЂ“ С„Р°Р№Р»С‹ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ СЃРјРѕРЅС‚РёСЂРѕРІР°РЅС‹ С‡РµСЂРµР· volume
      KAFKA_SSL_KEYSTORE_FILENAME: kafka1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds      
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      # РЈРєР°Р·С‹РІР°РµРј РїСѓС‚СЊ Рє JAAS-РєРѕРЅС„РёРіСѓСЂР°С†РёРѕРЅРЅРѕРјСѓ С„Р°Р№Р»Сѓ РґР»СЏ SASL/PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf"
      # ACL РїР°СЂР°РјРµС‚СЂС‹
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:admin;User:CN=kafka1;User:CN=kafka2;User:CN=kafka3;"
      # Р”Р»СЏ СЂРµРїР»РёРєР°С†РёРё 
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_NAME_BROKER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_ZOOKEEPER_SASL_CLIENT: "true"
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      KAFKA_SASL_ENABLED_MECHANISMS: "PLAIN,DIGEST-MD5"
    volumes:
      - ./certs/kafka1:/etc/kafka/secrets
      - kafka1_data:/var/lib/kafka/data
      - ./entrypoint_kafka.sh:/usr/local/bin/entrypoint_kafka.sh:ro
    entrypoint: ["/usr/local/bin/entrypoint_kafka.sh"]
    command: ["/etc/confluent/docker/run"]
    networks:
      - kafka_net

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9094:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds     
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      # РЈРєР°Р·С‹РІР°РµРј РїСѓС‚СЊ Рє JAAS-РєРѕРЅС„РёРіСѓСЂР°С†РёРѕРЅРЅРѕРјСѓ С„Р°Р№Р»Сѓ РґР»СЏ SASL/PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf"      
      # ACL РїР°СЂР°РјРµС‚СЂС‹
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:admin;User:CN=kafka1;User:CN=kafka2;User:CN=kafka3;"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_NAME_BROKER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_ZOOKEEPER_SASL_CLIENT: "true"
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      KAFKA_SASL_ENABLED_MECHANISMS: "PLAIN,DIGEST-MD5"
    volumes:
      - ./certs/kafka2:/etc/kafka/secrets
      - kafka2_data:/var/lib/kafka/data
      - ./entrypoint_kafka.sh:/usr/local/bin/entrypoint_kafka.sh:ro
    entrypoint: ["/usr/local/bin/entrypoint_kafka.sh"]
    command: ["/etc/confluent/docker/run"]      
    networks:
      - kafka_net

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9095:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: SASL_SSL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: SASL_SSL://kafka3:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_SSL:SASL_SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_SSL
      KAFKA_SSL_KEYSTORE_FILENAME: kafka3.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_creds
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka3.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_creds
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEY_CREDENTIALS: keystore_creds     
      # РЈРєР°Р·С‹РІР°РµРј РїСѓС‚СЊ Рє JAAS-РєРѕРЅС„РёРіСѓСЂР°С†РёРѕРЅРЅРѕРјСѓ С„Р°Р№Р»Сѓ РґР»СЏ SASL/PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/kafka_server_jaas.conf"      
      # ACL РїР°СЂР°РјРµС‚СЂС‹
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:admin;User:CN=kafka1;User:CN=kafka2;User:CN=kafka3;"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_LISTENER_NAME_BROKER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_ZOOKEEPER_SASL_CLIENT: "true"
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: https
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      KAFKA_SASL_ENABLED_MECHANISMS: "PLAIN,DIGEST-MD5"
    volumes:
      - ./certs/kafka3:/etc/kafka/secrets
      - kafka3_data:/var/lib/kafka/data
      - ./entrypoint_kafka.sh:/usr/local/bin/entrypoint_kafka.sh:ro
    entrypoint: ["/usr/local/bin/entrypoint_kafka.sh"]
    command: ["/etc/confluent/docker/run"]      
    networks:
      - kafka_net

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:


networks:
  kafka_net:
    driver: bridge

#!/bin/bash
set -e  # РџСЂРµРєСЂР°С‰Р°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ СЃРєСЂРёРїС‚Р° РїСЂРё РѕС€РёР±РєРµ Р»СЋР±РѕР№ РєРѕРјР°РЅРґС‹

echo "РћР¶РёРґР°РЅРёРµ РЅР°Р»РёС‡РёСЏ С„Р°Р№Р»Р° СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ (done.txt РєР°Рє РёРЅРґРёРєР°С‚РѕСЂ)..."
# Р¦РёРєР» РѕР¶РёРґР°РЅРёСЏ, РїРѕРєР° РЅРµ РїРѕСЏРІРёС‚СЃСЏ С„Р°Р№Р»-РёРЅРґРёРєР°С‚РѕСЂ Р·Р°РІРµСЂС€РµРЅРёСЏ РїРѕРґРіРѕС‚РѕРІРєРё СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ
while [ ! -f /etc/kafka/secrets/done.txt ]; do
  sleep 2  # РџСЂРѕРІРµСЂСЏРµРј РЅР°Р»РёС‡РёРµ С„Р°Р№Р»Р° РєР°Р¶РґС‹Рµ 2 СЃРµРєСѓРЅРґС‹
  echo "Р¤Р°Р№Р»С‹ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РІ РїСЂРѕС†РµСЃСЃРµ СЃРѕР·РґР°РЅРёСЏ..."
done

echo "Р¤Р°Р№Р» СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РЅР°Р№РґРµРЅ. Р—Р°РїСѓСЃРє РѕСЃРЅРѕРІРЅРѕРіРѕ РїСЂРѕС†РµСЃСЃР°."
# Р’С‹РїРѕР»РЅСЏРµРј РїРµСЂРµРґР°РЅРЅС‹Р№ РІ РєРѕРЅС‚РµР№РЅРµСЂРµ РїСЂРѕС†РµСЃСЃ
exec "$@"

#!/bin/bash
set -e  # РџСЂРµРєСЂР°С‰Р°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ СЃРєСЂРёРїС‚Р° РїСЂРё РѕС€РёР±РєРµ Р»СЋР±РѕР№ РєРѕРјР°РЅРґС‹

# РћР¶РёРґР°РЅРёРµ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј РїСЂРёР»РѕР¶РµРЅРёСЏ
/app/wait-for-certs.sh

# РћР¶РёРґР°РЅРёРµ РґРѕСЃС‚СѓРїРЅРѕСЃС‚Рё Kafka РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј РїСЂРёР»РѕР¶РµРЅРёСЏ
/app/wait-for-kafka.sh

echo "РћР¶РёРґР°РЅРёРµ РЅР°Р»РёС‡РёСЏ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ"
# Р¦РёРєР» РѕР¶РёРґР°РЅРёСЏ, РїРѕРєР° РЅРµ РїРѕСЏРІРёС‚СЃСЏ С„Р°Р№Р»-РёРЅРґРёРєР°С‚РѕСЂ Р·Р°РІРµСЂС€РµРЅРёСЏ РїРѕРґРіРѕС‚РѕРІРєРё СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ
while [ ! -f /var/ssl/private/done.txt ]; do
  sleep 2  # РџСЂРѕРІРµСЂСЏРµРј РЅР°Р»РёС‡РёРµ С„Р°Р№Р»Р° РєР°Р¶РґС‹Рµ 2 СЃРµРєСѓРЅРґС‹
done
echo "Р¤Р°Р№Р» РЅР°Р№РґРµРЅ, Р·Р°РїСѓСЃРє Java-РїСЂРёР»РѕР¶РµРЅРёСЏ..."

# Р–РґРµРј РґРѕРїРѕР»РЅРёС‚РµР»СЊРЅРѕРµ РІСЂРµРјСЏ, С‡С‚РѕР±С‹ РєР»Р°СЃС‚РµСЂ Kafka СЃС‚Р°Р±РёР»РёР·РёСЂРѕРІР°Р»СЃСЏ РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј РїСЂРёР»РѕР¶РµРЅРёСЏ
echo "РћР¶РёРґР°РЅРёРµ 15 СЃРµРєСѓРЅРґ РґР»СЏ СЃС‚Р°Р±РёР»РёР·Р°С†РёРё РєР»Р°СЃС‚РµСЂР° Kafka РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј Java-РїСЂРёР»РѕР¶РµРЅРёСЏ..."
sleep 15

# Р—Р°РїСѓСЃРє Java-РїСЂРёР»РѕР¶РµРЅРёСЏ
exec java -jar kafka-application.jar

#!/bin/bash
set -e  # РџСЂРµРєСЂР°С‰Р°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ СЃРєСЂРёРїС‚Р° РїСЂРё РѕС€РёР±РєРµ Р»СЋР±РѕР№ РєРѕРјР°РЅРґС‹

# РџРµСЂРµС…РѕРґРёРј РІ РґРёСЂРµРєС‚РѕСЂРёСЋ, РіРґРµ Р±СѓРґСѓС‚ С…СЂР°РЅРёС‚СЊСЃСЏ СЃРµСЂС‚РёС„РёРєР°С‚С‹
cd /var/ssl/private

# РџСЂРѕРІРµСЂСЏРµРј, СѓСЃС‚Р°РЅРѕРІР»РµРЅР° Р»Рё РїРµСЂРµРјРµРЅРЅР°СЏ CA_PASSWORD
if [ -z "$CA_PASSWORD" ]; then
  echo "РџРµСЂРµРјРµРЅРЅР°СЏ CA_PASSWORD РЅРµ СѓСЃС‚Р°РЅРѕРІР»РµРЅР°. Р—Р°РґР°Р№С‚Рµ РµС‘ РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј."
  exit 1
fi

# Р“РµРЅРµСЂРёСЂСѓРµРј CA-СЃРµСЂС‚РёС„РёРєР°С‚С‹, РµСЃР»Рё РѕРЅРё РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‚
if [ ! -f ca-cert ] || [ ! -f ca-key ]; then
  echo "=== РЎРѕР·РґР°РЅРёРµ РєРѕСЂРЅРµРІРѕРіРѕ СЃРµСЂС‚РёС„РёРєР°С‚Р° (CA) ==="
  openssl req -new -x509 -keyout ca-key -out ca-cert -days 365 -subj "/CN=Kafka-CA" -passout pass:${CA_PASSWORD}
else
  echo "CA-С„Р°Р№Р»С‹ СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓСЋС‚. РџСЂРѕРїСѓСЃРєР°РµРј РіРµРЅРµСЂР°С†РёСЋ CA."
fi

# РЎРѕР·РґР°РµРј С„Р°Р№Р»С‹ СЃ РєСЂРµРґРµРЅС€РµР»Р°РјРё РґР»СЏ keystore Рё truststore, РµСЃР»Рё РѕРЅРё РѕС‚СЃСѓС‚СЃС‚РІСѓСЋС‚
if [ ! -f keystore_creds ]; then
  echo "changeit" > keystore_creds
fi

if [ ! -f truststore_creds ]; then
  echo "changeit" > truststore_creds
fi

# Р¤СѓРЅРєС†РёСЏ РґР»СЏ РіРµРЅРµСЂР°С†РёРё СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РґР»СЏ Р±СЂРѕРєРµСЂР°
generate_broker_cert() {
  BROKER_NAME=$1
  if [ -f done.txt ]; then
    echo "РЎРµСЂС‚РёС„РёРєР°С‚С‹ РґР»СЏ ${BROKER_NAME} СѓР¶Рµ СЃРіРµРЅРµСЂРёСЂРѕРІР°РЅС‹. РџСЂРѕРїСѓСЃРєР°РµРј."
    return
  fi
  echo "=== Р“РµРЅРµСЂР°С†РёСЏ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РґР»СЏ ${BROKER_NAME} ==="
  
  # Р“РµРЅРµСЂР°С†РёСЏ keystore РґР»СЏ Р±СЂРѕРєРµСЂР°
  keytool -genkey -alias ${BROKER_NAME} -keyalg RSA \
    -keystore ${BROKER_NAME}.keystore.jks \
    -dname "CN=${BROKER_NAME}" -storepass changeit -keypass changeit

  # РЎРѕР·РґР°РЅРёРµ CSR (Certificate Signing Request) РґР»СЏ Р±СЂРѕРєРµСЂР°
  keytool -certreq -alias ${BROKER_NAME} -keystore ${BROKER_NAME}.keystore.jks -file ${BROKER_NAME}.csr -storepass changeit

  # РџРѕРґРїРёСЃР°РЅРёРµ CSR СЃ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёРµРј CA
  openssl x509 -req -CA ca-cert -CAkey ca-key -in ${BROKER_NAME}.csr -out ${BROKER_NAME}-signed.crt -days 365 -CAcreateserial -passin pass:${CA_PASSWORD}

  # РРјРїРѕСЂС‚ CA РІ keystore Р±СЂРѕРєРµСЂР°
  keytool -import -alias CARoot -file ca-cert -keystore ${BROKER_NAME}.keystore.jks -storepass changeit -noprompt

  # РРјРїРѕСЂС‚ РїРѕРґРїРёСЃР°РЅРЅРѕРіРѕ СЃРµСЂС‚РёС„РёРєР°С‚Р° Р±СЂРѕРєРµСЂР°
  keytool -import -alias ${BROKER_NAME} -file ${BROKER_NAME}-signed.crt -keystore ${BROKER_NAME}.keystore.jks -storepass changeit

  # РЎРѕР·РґР°РЅРёРµ truststore Рё РёРјРїРѕСЂС‚ CA
  keytool -import -alias CARoot -file ca-cert -keystore ${BROKER_NAME}.truststore.jks -storepass changeit -noprompt
  
  # РЎРѕР·РґР°РµРј С„Р°Р№Р»-РјР°СЂРєРµСЂ, СЃРёРіРЅР°Р»РёР·РёСЂСѓСЋС‰РёР№ Рѕ Р·Р°РІРµСЂС€РµРЅРёРё РіРµРЅРµСЂР°С†РёРё РґР»СЏ РґР°РЅРЅРѕРіРѕ Р±СЂРѕРєРµСЂР°
  touch done.txt
}

# Р“РµРЅРµСЂРёСЂСѓРµРј СЃРµСЂС‚РёС„РёРєР°С‚С‹ РґР»СЏ РєР°Р¶РґРѕРіРѕ Р±СЂРѕРєРµСЂР° (РµСЃР»Рё РѕРЅРё РµС‰Рµ РЅРµ СЃРѕР·РґР°РЅС‹)
for broker in kafka1 kafka2 kafka3; do
  mkdir -p ${broker}
  cd ${broker}
  
  # РџСЂРѕРІРµСЂСЏРµРј, Р±С‹Р» Р»Рё СѓР¶Рµ СЃРіРµРЅРµСЂРёСЂРѕРІР°РЅ СЃРµСЂС‚РёС„РёРєР°С‚
  if [ -f done.txt ]; then
    echo "РЎРµСЂС‚РёС„РёРєР°С‚С‹ РґР»СЏ ${broker} СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓСЋС‚, РїСЂРѕРїСѓСЃРєР°РµРј."
  else
    cp ../ca-cert ../ca-key ../keystore_creds ../truststore_creds .
    generate_broker_cert ${broker}
  fi

  # РљРѕРїРёСЂСѓРµРј РєРѕРЅС„РёРіСѓСЂР°С†РёРѕРЅРЅС‹Р№ С„Р°Р№Р» Р°СѓС‚РµРЅС‚РёС„РёРєР°С†РёРё, РµСЃР»Рё РµРіРѕ РЅРµС‚
  if [ ! -f kafka_server_jaas.conf ]; then
    cp ../kafka_server_jaas.conf .
    echo "Р”РѕР±Р°РІР»РµРЅ kafka_server_jaas.conf РІ ${broker}"
  fi

  cd ..
done

# Р“РµРЅРµСЂР°С†РёСЏ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РґР»СЏ РєР»РёРµРЅС‚Р° (producer)
mkdir -p producer
cd producer

if [ -f done.txt ]; then
  echo "РЎРµСЂС‚РёС„РёРєР°С‚С‹ РґР»СЏ producer СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓСЋС‚, РїСЂРѕРїСѓСЃРєР°РµРј."
else
  echo "=== Р“РµРЅРµСЂР°С†РёСЏ СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РґР»СЏ РєР»РёРµРЅС‚Р° (producer) ==="
  cp ../ca-cert ../ca-key ../keystore_creds ../truststore_creds .

  # Р“РµРЅРµСЂР°С†РёСЏ keystore РґР»СЏ РєР»РёРµРЅС‚Р°
  keytool -genkey -alias producer -keyalg RSA -keystore producer.keystore.jks -dname "CN=producer" -storepass changeit -keypass changeit

  # РЎРѕР·РґР°РЅРёРµ CSR РґР»СЏ РєР»РёРµРЅС‚Р°
  keytool -certreq -alias producer -keystore producer.keystore.jks -file producer.csr -storepass changeit

  # РџРѕРґРїРёСЃР°РЅРёРµ CSR СЃ РїРѕРјРѕС‰СЊСЋ CA
  openssl x509 -req -CA ca-cert -CAkey ca-key -in producer.csr -out producer-signed.crt -days 365 -CAcreateserial -passin pass:${CA_PASSWORD}

  # РРјРїРѕСЂС‚ CA РІ keystore РєР»РёРµРЅС‚Р°
  keytool -import -alias CARoot -file ca-cert -keystore producer.keystore.jks -storepass changeit -noprompt

  # РРјРїРѕСЂС‚ РїРѕРґРїРёСЃР°РЅРЅРѕРіРѕ СЃРµСЂС‚РёС„РёРєР°С‚Р° РєР»РёРµРЅС‚Р°
  keytool -import -alias producer -file producer-signed.crt -keystore producer.keystore.jks -storepass changeit

  # РЎРѕР·РґР°РЅРёРµ truststore РґР»СЏ РєР»РёРµРЅС‚Р° Рё РёРјРїРѕСЂС‚ CA
  keytool -import -alias CARoot -file ca-cert -keystore producer.truststore.jks -storepass changeit -noprompt

  # РЎРѕР·РґР°РµРј С„Р°Р№Р»-РјР°СЂРєРµСЂ, СѓРєР°Р·С‹РІР°СЋС‰РёР№, С‡С‚Рѕ РіРµРЅРµСЂР°С†РёСЏ Р·Р°РІРµСЂС€РµРЅР°
  touch done.txt
fi
cd ..

echo "РЎРµСЂС‚РёС„РёРєР°С‚С‹ СѓСЃРїРµС€РЅРѕ СЃРіРµРЅРµСЂРёСЂРѕРІР°РЅС‹."

# РљРѕРЅС‚РµР№РЅРµСЂ РѕСЃС‚Р°РµС‚СЃСЏ РІ РѕР¶РёРґР°РЅРёРё, С‡С‚РѕР±С‹ С„Р°Р№Р»С‹ РЅРµ СѓРґР°Р»СЏР»РёСЃСЊ РїРѕСЃР»Рµ Р·Р°РІРµСЂС€РµРЅРёСЏ
tail -f /dev/null

<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="
           http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- Р РѕРґРёС‚РµР»СЊСЃРєРёР№ POM Spring Boot -->
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.12</version>
    <relativePath/>
  </parent>

  <groupId>kafka-application</groupId>
  <artifactId>kafka-application</artifactId>
  <version>1.0</version>
  <packaging>jar</packaging>

  <properties>
    <java.version>11</java.version>
  </properties>

  <dependencies>
    <!-- РџРѕРґРґРµСЂР¶РєР° REST-РєРѕРЅС‚СЂРѕР»Р»РµСЂРѕРІ -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Kafka Integration -->
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>
    <!-- РљР»РёРµРЅС‚ Kafka -->
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
    </dependency>
    <!-- Jackson РґР»СЏ СЃРµСЂРёР°Р»РёР·Р°С†РёРё -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.13.3</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.13.3</version>
    </dependency>
    <!-- Р“РµРЅРµСЂР°С†РёСЏ С‚РµСЃС‚РѕРІС‹С… РґР°РЅРЅС‹С… -->
    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
      <version>1.0.2</version>
    </dependency>
    <!-- Kafka Streams API -->
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-streams</artifactId>
      <version>3.6.0</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>kafka-application</finalName>
    <plugins>
      <!-- РљРѕРјРїРёР»СЏС†РёСЏ РєРѕРґР° -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <encoding>UTF-8</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <!-- РЎРѕР·РґР°РЅРёРµ РёСЃРїРѕР»РЅСЏРµРјРѕРіРѕ JAR -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <mainClass>com.example.kafkainit.KafkaApplication</mainClass>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

#!/bin/bash
set -e  # РџСЂРµРєСЂР°С‰Р°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ СЃРєСЂРёРїС‚Р° РїСЂРё РѕС€РёР±РєРµ Р»СЋР±РѕР№ РєРѕРјР°РЅРґС‹

# РћР¶РёРґР°РЅРёРµ РїРѕСЏРІР»РµРЅРёСЏ С„Р°Р№Р»Р°-РёРЅРґРёРєР°С‚РѕСЂР° Р·Р°РІРµСЂС€РµРЅРёСЏ РіРµРЅРµСЂР°С†РёРё СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ
echo "РћР¶РёРґР°РЅРёРµ РЅР°Р»РёС‡РёСЏ С„Р°Р№Р»Р° СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ (/var/ssl/private/done.txt)..."
while [ ! -f /var/ssl/private/done.txt ]; do
  sleep 2  # РџСЂРѕРІРµСЂСЏРµРј РЅР°Р»РёС‡РёРµ С„Р°Р№Р»Р° РєР°Р¶РґС‹Рµ 2 СЃРµРєСѓРЅРґС‹
done

echo "Р¤Р°Р№Р» СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ РЅР°Р№РґРµРЅ. Р—Р°РїСѓСЃРє РѕСЃРЅРѕРІРЅРѕРіРѕ РїСЂРѕС†РµСЃСЃР°."
# Р’С‹РїРѕР»РЅСЏРµРј РїРµСЂРµРґР°РЅРЅС‹Р№ РїСЂРѕС†РµСЃСЃ
exec "$@"

#!/bin/bash
set -e  # РџСЂРµРєСЂР°С‰Р°РµС‚ РІС‹РїРѕР»РЅРµРЅРёРµ СЃРєСЂРёРїС‚Р° РїСЂРё РѕС€РёР±РєРµ Р»СЋР±РѕР№ РєРѕРјР°РЅРґС‹

echo "РћР¶РёРґР°РЅРёРµ РґРѕСЃС‚СѓРїРЅРѕСЃС‚Рё Р±СЂРѕРєРµСЂРѕРІ Kafka..."

# РџСЂРѕРІРµСЂСЏРµРј РґРѕСЃС‚СѓРїРЅРѕСЃС‚СЊ РєР°Р¶РґРѕРіРѕ Р±СЂРѕРєРµСЂР° РЅР° РїРѕСЂС‚Сѓ 9093.
# Р•СЃР»Рё С…РѕС‚СЏ Р±С‹ РѕРґРёРЅ Р±СЂРѕРєРµСЂ РЅРµРґРѕСЃС‚СѓРїРµРЅ, РїРѕРІС‚РѕСЂСЏРµРј РїСЂРѕРІРµСЂРєСѓ РєР°Р¶РґС‹Рµ 5 СЃРµРєСѓРЅРґ.
while ! nc -z kafka1 9093 || ! nc -z kafka2 9093 || ! nc -z kafka3 9093; do
    echo "Р‘СЂРѕРєРµСЂС‹ РµС‰Рµ РЅРµ РґРѕСЃС‚СѓРїРЅС‹, Р¶РґРµРј 5 СЃРµРєСѓРЅРґ..."
    sleep 5
done

echo "Р’СЃРµ Р±СЂРѕРєРµСЂС‹ РґРѕСЃС‚СѓРїРЅС‹!"
# Р—Р°РїСѓСЃРєР°РµРј РїРµСЂРµРґР°РЅРЅС‹Р№ РїСЂРѕС†РµСЃСЃ
exec "$@"

package com.example.kafkainit;

import org.apache.kafka.clients.admin.*;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.common.acl.*;
import org.apache.kafka.common.resource.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.util.*;
import java.util.concurrent.ExecutionException;

/**
 * РџСЂРѕРІРµСЂСЏРµС‚ ACL (РїСЂР°РІР° РґРѕСЃС‚СѓРїР°) РІ Kafka Рё С‚РµСЃС‚РёСЂСѓРµС‚ РІР·Р°РёРјРѕРґРµР№СЃС‚РІРёРµ.
 * 1. РџСЂРѕРІРµСЂСЏРµС‚ ACL С‡РµСЂРµР· AdminClient.
 * 2. РўРµСЃС‚РёСЂСѓРµС‚ РѕС‚РїСЂР°РІРєСѓ СЃРѕРѕР±С‰РµРЅРёР№ С‡РµСЂРµР· Producer.
 * 3. РўРµСЃС‚РёСЂСѓРµС‚ РІРѕР·РјРѕР¶РЅРѕСЃС‚СЊ С‡С‚РµРЅРёСЏ СЃРѕРѕР±С‰РµРЅРёР№ С‡РµСЂРµР· Consumer.
 */
@Component
@Order(2) // Р’С‹РїРѕР»РЅСЏРµС‚СЃСЏ РїРѕСЃР»Рµ ACLInitializer
public class ACLChecker implements CommandLineRunner {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${spring.kafka.properties.ssl.truststore.location}")
    private String truststoreLocation;

    @Value("${spring.kafka.properties.ssl.truststore.password}")
    private String truststorePassword;

    @Value("${spring.kafka.properties.ssl.keystore.location}")
    private String keystoreLocation;

    @Value("${spring.kafka.properties.ssl.keystore.password}")
    private String keystorePassword;

    @Value("${spring.kafka.properties.ssl.key.password}")
    private String keyPassword;

    @Value("${spring.kafka.properties.sasl.jaas.config}")
    private String saslJaasConfig;

    @Value("${spring.kafka.properties.security.protocol}")
    private String securityProtocol;

    @Value("${spring.kafka.properties.sasl.mechanism}")
    private String saslMechanism;

    private static final String PRODUCER_PRINCIPAL = "User:producer";

    @Override
    public void run(String... args) throws Exception {
        System.out.println("[INFO] РќР°С‡Р°Р»Рѕ РїСЂРѕРІРµСЂРєРё ACL Рё С‚РµСЃС‚РёСЂРѕРІР°РЅРёСЏ Kafka...");

        checkAcls();
        testProducer();
        testConsumer();

        System.out.println("[SUCCESS] РџСЂРѕРІРµСЂРєР° ACL Р·Р°РІРµСЂС€РµРЅР° СѓСЃРїРµС€РЅРѕ!");
    }

    /**
     * РџСЂРѕРІРµСЂСЏРµС‚ ACL РІ Kafka С‡РµСЂРµР· AdminClient.
     */
    private void checkAcls() throws ExecutionException, InterruptedException {
        Properties adminProps = createKafkaProperties();
        try (AdminClient adminClient = AdminClient.create(adminProps)) {
            System.out.println("[INFO] РџСЂРѕРІРµСЂРєР° ACL С‡РµСЂРµР· AdminClient...");

            checkTopicPermissions(adminClient, "topic-1", Arrays.asList(AclOperation.READ, AclOperation.WRITE, AclOperation.DESCRIBE));
            checkTopicPermissions(adminClient, "topic-2", Arrays.asList(AclOperation.READ, AclOperation.WRITE, AclOperation.DESCRIBE));

            Set<String> topics = adminClient.listTopics().names().get();
            System.out.println("[INFO] РЎРїРёСЃРѕРє РґРѕСЃС‚СѓРїРЅС‹С… С‚РѕРїРёРєРѕРІ: " + topics);
        }
    }

    /**
     * РџСЂРѕРІРµСЂСЏРµС‚ РїСЂР°РІР° ACL РґР»СЏ Р·Р°РґР°РЅРЅРѕРіРѕ С‚РѕРїРёРєР°.
     */
    private void checkTopicPermissions(AdminClient adminClient, String topic, List<AclOperation> operations) throws ExecutionException, InterruptedException {
        System.out.println("[INFO] РџСЂРѕРІРµСЂРєР° ACL РґР»СЏ С‚РѕРїРёРєР°: " + topic);
        for (AclOperation operation : operations) {
            System.out.println("[INFO] " + operation + ": " + getAcls(adminClient, topic, operation));
        }
    }

    /**
     * РўРµСЃС‚ РѕС‚РїСЂР°РІРєРё СЃРѕРѕР±С‰РµРЅРёР№ С‡РµСЂРµР· Producer.
     */
    private void testProducer() {
        Properties producerProps = createKafkaProperties();
        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");
        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");

        try (Producer<String, String> producer = new KafkaProducer<>(producerProps)) {
            System.out.println("[INFO] РќР°С‡РёРЅР°РµРј С‚РµСЃС‚РёСЂРѕРІР°РЅРёРµ Producer...");
            sendMessage(producer, "topic-1", "Hello from topic-1!");
            sendMessage(producer, "topic-2", "Hello from topic-2!");
            System.out.println("[SUCCESS] РЎРѕРѕР±С‰РµРЅРёСЏ СѓСЃРїРµС€РЅРѕ РѕС‚РїСЂР°РІР»РµРЅС‹.");
        } catch (Exception e) {
            System.err.println("[ERROR] РћС€РёР±РєР° РїСЂРё РѕС‚РїСЂР°РІРєРµ СЃРѕРѕР±С‰РµРЅРёР№: " + e.getMessage());
        }
    }

    /**
     * РћС‚РїСЂР°РІР»СЏРµС‚ СЃРѕРѕР±С‰РµРЅРёРµ РІ Kafka.
     */
    private void sendMessage(Producer<String, String> producer, String topic, String message) {
        producer.send(new ProducerRecord<>(topic, "key", message));
        producer.flush();
        System.out.println("[SUCCESS] РЎРѕРѕР±С‰РµРЅРёРµ РѕС‚РїСЂР°РІР»РµРЅРѕ РІ " + topic);
    }

    /**
     * РўРµСЃС‚РёСЂСѓРµС‚ РІРѕР·РјРѕР¶РЅРѕСЃС‚СЊ С‡С‚РµРЅРёСЏ СЃРѕРѕР±С‰РµРЅРёР№ С‡РµСЂРµР· Consumer.
     */
    private void testConsumer() {
        Properties consumerProps = createKafkaProperties();
        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, "group1");
        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        testConsumerForTopic(consumerProps, "topic-1", true);
        testConsumerForTopic(consumerProps, "topic-2", false);
    }

    /**
     * РџСЂРѕРІРµСЂСЏРµС‚, РјРѕР¶РµС‚ Р»Рё Consumer С‡РёС‚Р°С‚СЊ РёР· СѓРєР°Р·Р°РЅРЅРѕРіРѕ С‚РѕРїРёРєР°.
     */
    private void testConsumerForTopic(Properties consumerProps, String topic, boolean expectSuccess) {
        System.out.println("[INFO] РўРµСЃС‚РёСЂРѕРІР°РЅРёРµ Consumer РґР»СЏ " + topic);
        try (Consumer<String, String> consumer = new KafkaConsumer<>(consumerProps)) {
            consumer.subscribe(Collections.singletonList(topic));
            ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(5));

            if (!records.isEmpty()) {
                System.out.println("[SUCCESS] Consumer РїСЂРѕС‡РёС‚Р°Р» " + records.count() + " СЃРѕРѕР±С‰РµРЅРёР№ РёР· " + topic);
                for (ConsumerRecord<String, String> record : records) {
                    System.out.printf("[INFO] offset=%d, key=%s, value=%s%n", record.offset(), record.key(), record.value());
                }
            } else if (expectSuccess) {
                System.out.println("[WARN] РќРµС‚ СЃРѕРѕР±С‰РµРЅРёР№, РЅРѕ РіР»Р°РІРЅРѕРµ - РЅРµ СѓРїР°Р»Рё РІ Authorization Error.");
            } else {
                System.out.println("[SUCCESS] Р§С‚РµРЅРёРµ РёР· " + topic + " Р·Р°РїСЂРµС‰РµРЅРѕ (РѕР¶РёРґР°РµРјРѕРµ РїРѕРІРµРґРµРЅРёРµ).");
            }
        } catch (Exception e) {
            System.err.println("[ERROR] РћС€РёР±РєР° РїСЂРё С‡С‚РµРЅРёРё " + topic + ": " + e.getMessage());
        }
    }

    /**
     * РџРѕР»СѓС‡Р°РµС‚ СЃРїРёСЃРѕРє ACL РґР»СЏ С‚РѕРїРёРєР°.
     */
    private Collection<AclBinding> getAcls(AdminClient adminClient, String topic, AclOperation operation)
            throws ExecutionException, InterruptedException {
        ResourcePatternFilter resourceFilter = new ResourcePatternFilter(ResourceType.TOPIC, topic, PatternType.LITERAL);
        AccessControlEntryFilter entryFilter = new AccessControlEntryFilter(PRODUCER_PRINCIPAL, "*", operation, AclPermissionType.ALLOW);
        AclBindingFilter filter = new AclBindingFilter(resourceFilter, entryFilter);
        return adminClient.describeAcls(filter).values().get();
    }

    /**
     * РЎРѕР·РґР°РµС‚ Рё РІРѕР·РІСЂР°С‰Р°РµС‚ РЅР°СЃС‚СЂРѕР№РєРё Kafka РґР»СЏ AdminClient, Producer Рё Consumer.
     */
    private Properties createKafkaProperties() {
        Properties props = new Properties();
        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put("security.protocol", securityProtocol);
        props.put("sasl.mechanism", saslMechanism);
        props.put("sasl.jaas.config", saslJaasConfig);
        props.put("ssl.truststore.location", truststoreLocation);
        props.put("ssl.truststore.password", truststorePassword);
        props.put("ssl.keystore.location", keystoreLocation);
        props.put("ssl.keystore.password", keystorePassword);
        props.put("ssl.key.password", keyPassword);
        return props;
    }
}

package com.example.kafkainit;

import org.apache.kafka.clients.admin.*;
import org.apache.kafka.common.acl.*;
import org.apache.kafka.common.resource.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

/**
 * ACLInitializer вЂ” РёРЅРёС†РёР°Р»РёР·Р°С‚РѕСЂ С‚РѕРїРёРєРѕРІ Рё ACL (РїСЂР°РІ РґРѕСЃС‚СѓРїР°) РІ Kafka.
 * Р’С‹РїРѕР»РЅСЏРµС‚СЃСЏ РїСЂРё Р·Р°РїСѓСЃРєРµ РїСЂРёР»РѕР¶РµРЅРёСЏ РїРµСЂРµРґ ACLChecker.
 */
@Component
@Order(1) // Р’С‹РїРѕР»РЅРёС‚СЃСЏ РїРµСЂРµРґ ACLChecker
public class ACLInitializer implements CommandLineRunner {

    @Value("${kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${kafka.ssl.truststore.location}")
    private String truststoreLocation;

    @Value("${kafka.ssl.truststore.password}")
    private String truststorePassword;

    @Value("${kafka.ssl.keystore.location}")
    private String keystoreLocation;

    @Value("${kafka.ssl.keystore.password}")
    private String keystorePassword;

    @Value("${kafka.ssl.key.password}")
    private String keyPassword;

    private final List<String> users = Arrays.asList("User:producer");

    @Override
    public void run(String... args) throws Exception {
        Properties config = new Properties();
        config.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        config.put("security.protocol", "SASL_SSL");
        config.put("sasl.mechanism", "PLAIN");

        config.put("sasl.jaas.config",
        "org.apache.kafka.common.security.plain.PlainLoginModule required " +
        "username=\"admin\" " +
        "password=\"admin-secret\";");

        config.put("ssl.truststore.location", truststoreLocation);
        config.put("ssl.truststore.password", truststorePassword);
        config.put("ssl.keystore.location", keystoreLocation);
        config.put("ssl.keystore.password", keystorePassword);
        config.put("ssl.key.password", keyPassword);

        try (AdminClient adminClient = AdminClient.create(config)) {
            createTopics(adminClient);
            createAcls(adminClient);
        }
    }

    private void createTopics(AdminClient adminClient) throws InterruptedException, ExecutionException {
        int retryCount = 0;
        final int maxRetries = 5;
        long waitTime = 3000;

        while (retryCount < maxRetries) {
            Set<String> existingTopics = adminClient.listTopics().names().get();

            List<NewTopic> topicsToCreate = new ArrayList<>();
            if (!existingTopics.contains("topic-1")) {
                topicsToCreate.add(new NewTopic("topic-1", 3, (short) 3));
            }
            if (!existingTopics.contains("topic-2")) {
                topicsToCreate.add(new NewTopic("topic-2", 3, (short) 3));
            }

            if (topicsToCreate.isEmpty()) {
                System.out.println("[INFO] Р’СЃРµ С‚РѕРїРёРєРё СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓСЋС‚.");
                break;
            }

            try {
                adminClient.createTopics(topicsToCreate).all().get();
                System.out.println("[SUCCESS] РЎРѕР·РґР°РЅС‹ С‚РѕРїРёРєРё: " + topicsToCreate.stream()
                        .map(NewTopic::name)
                        .collect(Collectors.joining(", ")));
                break;
            } catch (ExecutionException e) {
                if (e.getCause() instanceof org.apache.kafka.common.errors.TopicExistsException) {
                    System.out.println("[WARN] РўРѕРїРёРє СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚. РџРѕРІС‚РѕСЂСЏРµРј РїРѕРїС‹С‚РєСѓ...");
                } else {
                    System.err.println("[ERROR] РћС€РёР±РєР° РїСЂРё СЃРѕР·РґР°РЅРёРё С‚РѕРїРёРєРѕРІ: " + e.getMessage());
                    throw e;
                }
            }

            retryCount++;
            Thread.sleep(waitTime);
            waitTime *= 2;
        }

        if (retryCount == maxRetries) {
            System.out.println("[ERROR] Р”РѕСЃС‚РёРіРЅСѓС‚Рѕ РјР°РєСЃРёРјР°Р»СЊРЅРѕРµ С‡РёСЃР»Рѕ РїРѕРїС‹С‚РѕРє. РќРµРєРѕС‚РѕСЂС‹Рµ С‚РѕРїРёРєРё РјРѕРіР»Рё РЅРµ СЃРѕР·РґР°С‚СЊСЃСЏ.");
        }
    }

    private void createAcls(AdminClient adminClient) throws InterruptedException, ExecutionException {
        List<AclBinding> aclBindings = new ArrayList<>();

        ResourcePattern topic1 = new ResourcePattern(ResourceType.TOPIC, "topic-1", PatternType.LITERAL);
        for (String user : users) {
            aclBindings.add(new AclBinding(topic1, new AccessControlEntry(user, "*", AclOperation.CREATE, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(topic1, new AccessControlEntry(user, "*", AclOperation.DESCRIBE, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(topic1, new AccessControlEntry(user, "*", AclOperation.READ, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(topic1, new AccessControlEntry(user, "*", AclOperation.WRITE, AclPermissionType.ALLOW)));
        }

        ResourcePattern topic2 = new ResourcePattern(ResourceType.TOPIC, "topic-2", PatternType.LITERAL);
        for (String user : users) {
            aclBindings.add(new AclBinding(topic2, new AccessControlEntry(user, "*", AclOperation.CREATE, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(topic2, new AccessControlEntry(user, "*", AclOperation.DESCRIBE, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(topic2, new AccessControlEntry(user, "*", AclOperation.WRITE, AclPermissionType.ALLOW)));
        }

        for (String user : users) {
            ResourcePattern clusterResource = new ResourcePattern(ResourceType.CLUSTER, "kafka-cluster", PatternType.LITERAL);
            aclBindings.add(new AclBinding(clusterResource, new AccessControlEntry(user, "*", AclOperation.DESCRIBE, AclPermissionType.ALLOW)));

            ResourcePattern groupResource = new ResourcePattern(ResourceType.GROUP, "group1", PatternType.LITERAL);
            aclBindings.add(new AclBinding(groupResource, new AccessControlEntry(user, "*", AclOperation.READ, AclPermissionType.ALLOW)));
            aclBindings.add(new AclBinding(groupResource, new AccessControlEntry(user, "*", AclOperation.DESCRIBE, AclPermissionType.ALLOW)));
        }

        List<AclBinding> aclsToCreate = new ArrayList<>();
        for (AclBinding binding : aclBindings) {
            if (!aclExists(adminClient, binding)) {
                aclsToCreate.add(binding);
            }
        }

        if (!aclsToCreate.isEmpty()) {
            adminClient.createAcls(aclsToCreate).all().get();
            System.out.println("[SUCCESS] РЎРѕР·РґР°РЅС‹ ACL:");
            for (AclBinding acl : aclsToCreate) {
                System.out.printf("[INFO] ACL: %s %s %s%n",
                        acl.entry().principal(),
                        acl.pattern().resourceType(),
                        acl.entry().operation());
            }
        } else {
            System.out.println("[INFO] Р’СЃРµ ACL СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓСЋС‚, СЃРѕР·РґР°РЅРёРµ РЅРµ С‚СЂРµР±СѓРµС‚СЃСЏ.");
        }
    }

    private boolean aclExists(AdminClient adminClient, AclBinding binding)
            throws InterruptedException, ExecutionException {
        AclBindingFilter filter = binding.toFilter();
        Collection<AclBinding> existingAcls = adminClient.describeAcls(filter).values().get();
        return !existingAcls.isEmpty();
    }
}

package com.example.kafkainit;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * РћСЃРЅРѕРІРЅРѕР№ РєР»Р°СЃСЃ РїСЂРёР»РѕР¶РµРЅРёСЏ Kafka.
 * Р—Р°РїСѓСЃРєР°РµС‚ Spring Boot РїСЂРёР»РѕР¶РµРЅРёРµ Рё РёРЅРёС†РёР°Р»РёР·РёСЂСѓРµС‚ РєРѕРЅС‚РµРєСЃС‚.
 */
@SpringBootApplication
public class KafkaApplication {

    /**
     * РўРѕС‡РєР° РІС…РѕРґР° РІ РїСЂРёР»РѕР¶РµРЅРёРµ.
     *
     * @param args РђСЂРіСѓРјРµРЅС‚С‹ РєРѕРјР°РЅРґРЅРѕР№ СЃС‚СЂРѕРєРё
     */
    public static void main(String[] args) {
        System.out.println("[INFO] Р—Р°РїСѓСЃРє KafkaApplication...");
        SpringApplication.run(KafkaApplication.class, args);
        System.out.println("[SUCCESS] KafkaApplication СѓСЃРїРµС€РЅРѕ Р·Р°РїСѓС‰РµРЅРѕ!");
    }
}

package com.example.kafkainit;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

/**
 * KafkaConsumerListener - СЃР»СѓС€Р°С‚РµР»СЊ СЃРѕРѕР±С‰РµРЅРёР№ Kafka.
 * РџРѕРґРїРёСЃС‹РІР°РµС‚СЃСЏ РЅР° С‚РѕРїРёРєРё Рё РѕР±СЂР°Р±Р°С‚С‹РІР°РµС‚ РІС…РѕРґСЏС‰РёРµ СЃРѕРѕР±С‰РµРЅРёСЏ.
 */
@Component
public class KafkaConsumerListener {

    /**
     * РћР±СЂР°Р±Р°С‚С‹РІР°РµС‚ СЃРѕРѕР±С‰РµРЅРёСЏ РёР· "topic-1".
     *
     * @param message РџРѕР»СѓС‡РµРЅРЅРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ
     */
    @KafkaListener(topics = "topic-1", groupId = "group1")
    public void listenTopic1(String message) {
        System.out.println("[INFO] РџРѕР»СѓС‡РµРЅРѕ СЃРѕРѕР±С‰РµРЅРёРµ РёР· topic-1: " + message);
    }

    /**
     * РћР±СЂР°Р±Р°С‚С‹РІР°РµС‚ СЃРѕРѕР±С‰РµРЅРёСЏ РёР· "topic-2".
     *
     * @param message РџРѕР»СѓС‡РµРЅРЅРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ
     */
    @KafkaListener(topics = "topic-2", groupId = "group1")
    public void listenTopic2(String message) {
        System.out.println("[INFO] РџРѕР»СѓС‡РµРЅРѕ СЃРѕРѕР±С‰РµРЅРёРµ РёР· topic-2: " + message);
    }
}

import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry;
import org.springframework.stereotype.Component;

/**
 * РЈРїСЂР°РІР»СЏРµС‚ Р·Р°РїСѓСЃРєРѕРј Kafka Consumer РїРѕСЃР»Рµ Р·Р°РіСЂСѓР·РєРё РїСЂРёР»РѕР¶РµРЅРёСЏ.
 * Р–РґРµС‚ Р·Р°РІРµСЂС€РµРЅРёСЏ ACLInitializer РїРµСЂРµРґ РІРєР»СЋС‡РµРЅРёРµРј СЃР»СѓС€Р°С‚РµР»РµР№ Kafka.
 * РќРђР”Рћ Р±С‹ РїСЂРёРєСЂСѓС‚РёС‚СЊ РѕРєРѕРЅС‡Р°С‚РµР»СЊРЅРѕ, С‡С‚РѕР±С‹ РїСЂРё СЃС‚Р°СЂС‚Рµ РїРѕРєР° РЅРµ РѕС‚СЂР°СЊРѕС‚Р°Р»Рѕ ACLInitializer РєРѕРЅСЃСЊСЋРјРµСЂС‹ РЅРµ СЂСѓРіР°Р»РёСЃСЊ РёР· РїСЂР°РІ РґРѕСЃС‚СѓРїР°
 */
@Component
public class KafkaConsumerManager implements ApplicationListener<ContextRefreshedEvent> {

    private final KafkaListenerEndpointRegistry kafkaListenerEndpointRegistry;

    /**
     * Р’РЅРµРґСЂРµРЅРёРµ СЂРµРµСЃС‚СЂР° Kafka Listener-РѕРІ.
     *
     * @param kafkaListenerEndpointRegistry Р РµРµСЃС‚СЂ РІСЃРµС… Kafka Listener-РѕРІ
     */
    public KafkaConsumerManager(KafkaListenerEndpointRegistry kafkaListenerEndpointRegistry) {
        this.kafkaListenerEndpointRegistry = kafkaListenerEndpointRegistry;
    }

    /**
     * Р’С‹Р·С‹РІР°РµС‚СЃСЏ РїРѕСЃР»Рµ РїРѕР»РЅРѕР№ РёРЅРёС†РёР°Р»РёР·Р°С†РёРё РєРѕРЅС‚РµРєСЃС‚Р° Spring.
     * РћР¶РёРґР°РµС‚ Р·Р°РІРµСЂС€РµРЅРёСЏ ACLInitializer РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј Kafka Listener-РѕРІ.
     *
     * @param event РЎРѕР±С‹С‚РёРµ Р·Р°РІРµСЂС€РµРЅРёСЏ Р·Р°РіСЂСѓР·РєРё РєРѕРЅС‚РµРєСЃС‚Р° Spring
     */
    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        System.out.println("[INFO] РћР¶РёРґР°РЅРёРµ Р·Р°РІРµСЂС€РµРЅРёСЏ ACLInitializer РїРµСЂРµРґ РІРєР»СЋС‡РµРЅРёРµРј Kafka Listener...");

        try {
            Thread.sleep(5000); // РћР¶РёРґР°РЅРёРµ 5 СЃРµРєСѓРЅРґ РїРµСЂРµРґ Р·Р°РїСѓСЃРєРѕРј (РјРѕР¶РЅРѕ Р·Р°РјРµРЅРёС‚СЊ РЅР° Р±РѕР»РµРµ РЅР°РґРµР¶РЅС‹Р№ РјРµС…Р°РЅРёР·Рј)
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.err.println("[ERROR] РћС€РёР±РєР° РІРѕ РІСЂРµРјСЏ РѕР¶РёРґР°РЅРёСЏ Р·Р°РїСѓСЃРєР° Kafka Listener: " + e.getMessage());
        }

        System.out.println("[SUCCESS] Р’РєР»СЋС‡Р°РµРј Kafka Consumer!");
        kafkaListenerEndpointRegistry.getListenerContainers().forEach(container -> container.start());
    }
}

package com.example.kafkainit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.*;
import com.fasterxml.jackson.core.JsonProcessingException;

/**
 * РљРѕРЅС‚СЂРѕР»Р»РµСЂ РґР»СЏ РѕС‚РїСЂР°РІРєРё СЃРѕРѕР±С‰РµРЅРёР№ РІ Kafka.
 * РџСЂРµРґРѕСЃС‚Р°РІР»СЏРµС‚ REST API РґР»СЏ РѕС‚РїСЂР°РІРєРё РїСЂРѕСЃС‚С‹С… Рё СЃРµСЂРёР°Р»РёР·РѕРІР°РЅРЅС‹С… СЃРѕРѕР±С‰РµРЅРёР№.
 */
@RestController
@RequestMapping("/api")
public class KafkaProducerController {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate; // KafkaTemplate РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РѕС‚РїСЂР°РІРєРё СЃРѕРѕР±С‰РµРЅРёР№ РІ Kafka

    /**
     * РћС‚РїСЂР°РІР»СЏРµС‚ РїСЂРѕСЃС‚РѕРµ СЃС‚СЂРѕРєРѕРІРѕРµ СЃРѕРѕР±С‰РµРЅРёРµ РІ СѓРєР°Р·Р°РЅРЅС‹Р№ С‚РѕРїРёРє Kafka.
     *
     * @param topic   РќР°Р·РІР°РЅРёРµ С‚РѕРїРёРєР° Kafka
     * @param key     РљР»СЋС‡ СЃРѕРѕР±С‰РµРЅРёСЏ (РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ РїР°СЂС‚РёС†РёРѕРЅРёСЂРѕРІР°РЅРёСЏ)
     * @param message РўРµР»Рѕ СЃРѕРѕР±С‰РµРЅРёСЏ
     * @return РЎС‚Р°С‚СѓСЃ РѕРїРµСЂР°С†РёРё
     */
    @PostMapping("/send")
    public String sendMessage(@RequestParam String topic,
                              @RequestParam String key,
                              @RequestParam String message) {
        kafkaTemplate.send(topic, key, message);
        return "[SUCCESS] Message sent to " + topic;
    }

    /**
     * РћС‚РїСЂР°РІР»СЏРµС‚ СЃРµСЂРёР°Р»РёР·РѕРІР°РЅРЅРѕРµ JSON-СЃРѕРѕР±С‰РµРЅРёРµ (РёСЃРїРѕР»СЊР·СѓСЏ РѕР±СЉРµРєС‚ Message) РІ Kafka.
     *
     * @param topic РќР°Р·РІР°РЅРёРµ С‚РѕРїРёРєР° Kafka
     * @param key   РљР»СЋС‡ СЃРѕРѕР±С‰РµРЅРёСЏ
     * @param value Р—РЅР°С‡РµРЅРёРµ СЃРѕРѕР±С‰РµРЅРёСЏ
     * @return РЎС‚Р°С‚СѓСЃ РѕРїРµСЂР°С†РёРё
     * @throws JsonProcessingException Р•СЃР»Рё РЅРµ СѓРґР°Р»РѕСЃСЊ СЃРµСЂРёР°Р»РёР·РѕРІР°С‚СЊ РѕР±СЉРµРєС‚
     */
    @PostMapping("/sendSerialized")
    public String sendSerialized(@RequestParam String topic,
                                 @RequestParam String key,
                                 @RequestParam String value) throws JsonProcessingException {
        Message msg = new Message(key, value); // РЎРѕР·РґР°РµРј РѕР±СЉРµРєС‚ СЃРѕРѕР±С‰РµРЅРёСЏ
        String serialized = msg.serialize();   // РџСЂРµРѕР±СЂР°Р·СѓРµРј РѕР±СЉРµРєС‚ РІ JSON
        kafkaTemplate.send(topic, key, serialized);
        return "[SUCCESS] Serialized message sent to " + topic;
    }
}

package com.example.kafkainit;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * РљР»Р°СЃСЃ Message РїСЂРµРґСЃС‚Р°РІР»СЏРµС‚ СЃРѕРѕР±С‰РµРЅРёРµ РІ Kafka.
 * РСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ РґР»СЏ СЃРµСЂРёР°Р»РёР·Р°С†РёРё Рё РґРµСЃРµСЂРёР°Р»РёР·Р°С†РёРё СЃРѕРѕР±С‰РµРЅРёР№ РІ JSON.
 */
public class Message {

    private String key;
    private String value;

    /**
     * РљРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ Р±РµР· РїР°СЂР°РјРµС‚СЂРѕРІ (РЅСѓР¶РµРЅ РґР»СЏ РґРµСЃРµСЂРёР°Р»РёР·Р°С†РёРё Jackson).
     */
    public Message() {}

    /**
     * РљРѕРЅСЃС‚СЂСѓРєС‚РѕСЂ РґР»СЏ СЃРѕР·РґР°РЅРёСЏ СЃРѕРѕР±С‰РµРЅРёСЏ СЃ РєР»СЋС‡РѕРј Рё Р·РЅР°С‡РµРЅРёРµРј.
     *
     * @param key   РљР»СЋС‡ СЃРѕРѕР±С‰РµРЅРёСЏ
     * @param value Р—РЅР°С‡РµРЅРёРµ СЃРѕРѕР±С‰РµРЅРёСЏ
     */
    public Message(String key, String value) {
        this.key = key;
        this.value = value;
    }

    public String getKey() { return key; }
    public void setKey(String key) { this.key = key; }

    public String getValue() { return value; }
    public void setValue(String value) { this.value = value; }

    /**
     * РџСЂРµРѕР±СЂР°Р·СѓРµС‚ РѕР±СЉРµРєС‚ Message РІ JSON-СЃС‚СЂРѕРєСѓ.
     *
     * @return JSON-РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ РѕР±СЉРµРєС‚Р° Message
     * @throws JsonProcessingException Р•СЃР»Рё РЅРµ СѓРґР°Р»РѕСЃСЊ СЃРµСЂРёР°Р»РёР·РѕРІР°С‚СЊ РѕР±СЉРµРєС‚
     */
    public String serialize() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(this);
    }

    /**
     * РЎРѕР·РґР°РµС‚ РѕР±СЉРµРєС‚ Message РёР· JSON-СЃС‚СЂРѕРєРё.
     *
     * @param json JSON-СЃС‚СЂРѕРєР°, СЃРѕРґРµСЂР¶Р°С‰Р°СЏ РґР°РЅРЅС‹Рµ Message
     * @return РћР±СЉРµРєС‚ Message
     * @throws JsonProcessingException Р•СЃР»Рё РЅРµ СѓРґР°Р»РѕСЃСЊ РґРµСЃРµСЂРёР°Р»РёР·РѕРІР°С‚СЊ JSON
     */
    public static Message deserialize(String json) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(json, Message.class);
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ СЃС‚СЂРѕРєРѕРІРѕРµ РїСЂРµРґСЃС‚Р°РІР»РµРЅРёРµ РѕР±СЉРµРєС‚Р° Message.
     *
     * @return РЎС‚СЂРѕРєР° РІ С„РѕСЂРјР°С‚Рµ "Message {key='...', value='...'}"
     */
    @Override
    public String toString() {
        return "Message {key='" + key + "', value='" + value + "'}";
    }
}

spring:
  kafka:
    listener:
      auto-startup: false  # РћС‚РєР»СЋС‡Р°РµРј Р°РІС‚РѕР·Р°РїСѓСЃРє РІСЃРµС… @KafkaListener (СЂСѓС‡РЅРѕР№ РєРѕРЅС‚СЂРѕР»СЊ)
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}  # РђРґСЂРµСЃР° Kafka-Р±СЂРѕРєРµСЂРѕРІ

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer  # РЎРµСЂРёР°Р»РёР·Р°С†РёСЏ РєР»СЋС‡РµР№
      value-serializer: org.apache.kafka.common.serialization.StringSerializer  # РЎРµСЂРёР°Р»РёР·Р°С†РёСЏ Р·РЅР°С‡РµРЅРёР№

    consumer:
      group-id: group1  # Р“СЂСѓРїРїР° РїРѕС‚СЂРµР±РёС‚РµР»РµР№ Kafka
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Р”РµСЃРµСЂРёР°Р»РёР·Р°С†РёСЏ РєР»СЋС‡РµР№
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Р”РµСЃРµСЂРёР°Р»РёР·Р°С†РёСЏ Р·РЅР°С‡РµРЅРёР№

    # Р”РѕРїРѕР»РЅРёС‚РµР»СЊРЅС‹Рµ РЅР°СЃС‚СЂРѕР№РєРё Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё Kafka
    properties:
      security.protocol: SASL_SSL  # РСЃРїРѕР»СЊР·СѓРµРј Р±РµР·РѕРїР°СЃРЅС‹Р№ РїСЂРѕС‚РѕРєРѕР» SASL_SSL
      sasl.mechanism: PLAIN  # РњРµС…Р°РЅРёР·Рј Р°СѓС‚РµРЅС‚РёС„РёРєР°С†РёРё SASL
      sasl.jaas.config: >  # РљРѕРЅС„РёРіСѓСЂР°С†РёСЏ Р°СѓС‚РµРЅС‚РёС„РёРєР°С†РёРё С‡РµСЂРµР· SASL PLAIN
        org.apache.kafka.common.security.plain.PlainLoginModule required
        username="producer"
        password="producer-secret";
      
      # SSL-РєРѕРЅС„РёРіСѓСЂР°С†РёСЏ (С…СЂР°РЅРёР»РёС‰Р° СЃРµСЂС‚РёС„РёРєР°С‚РѕРІ)
      ssl.truststore.location: ${SSL_TRUSTSTORE_LOCATION}
      ssl.truststore.password: ${SSL_TRUSTSTORE_PASSWORD}
      ssl.keystore.location: ${SSL_KEYSTORE_LOCATION}
      ssl.keystore.password: ${SSL_KEYSTORE_PASSWORD}
      ssl.key.password: ${SSL_KEY_PASSWORD}

# Р”СѓР±Р»РёСЂСѓРµРј РѕСЃРЅРѕРІРЅС‹Рµ РЅР°СЃС‚СЂРѕР№РєРё Kafka
kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9093}
  ssl:
    truststore:
      location: ${SSL_TRUSTSTORE_LOCATION}
      password: ${SSL_TRUSTSTORE_PASSWORD}
    keystore:
      location: ${SSL_KEYSTORE_LOCATION}
      password: ${SSL_KEYSTORE_PASSWORD}
    key:
      password: ${SSL_KEY_PASSWORD}

<configuration>
    <!-- РќР°СЃС‚СЂРѕР№РєР° РєРѕРЅСЃРѕР»СЊРЅРѕРіРѕ РІС‹РІРѕРґР° -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset> <!-- UTF-8 РїРѕР» СѓРјРѕР»С‡Р°РЅРёСЋ, РґР»СЏ РєРѕРЅСЃРѕР»Рё РІ windows РЅРµ СЃСЂР°Р±Р°С‚С‹РІР°РµС‚, РІСЃРµ СЂР°РІРЅРѕ РЅР°РґРѕ РІС‹Р·С‹РІР°С‚СЊ cp-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- РЈСЂРѕРІРµРЅСЊ Р»РѕРіРёСЂРѕРІР°РЅРёСЏ РґР»СЏ РїСЂРѕРґСЋСЃРµСЂРѕРІ -->
    <logger name="kafka.producer" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!-- РЈСЂРѕРІРµРЅСЊ Р»РѕРіРёСЂРѕРІР°РЅРёСЏ РґР»СЏ РєРѕРЅСЃСЋРјРµСЂРѕРІ -->
    <logger name="kafka.consumer" level="info" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!-- РћС‚РєР»СЋС‡РµРЅРёРµ Р»РѕРіРѕРІ РѕС‚ Kafka РєР»РёРµРЅС‚Р° (СЃРёР»СЊРЅРѕ С„Р»СѓРґСЏС‚)-->
    <logger name="org.apache.kafka" level="warn" />
    <logger name="org.apache.kafka.clients" level="warn" />

    <!-- Р“Р»РѕР±Р°Р»СЊРЅС‹Р№ СѓСЂРѕРІРµРЅСЊ Р»РѕРіРёСЂРѕРІР°РЅРёСЏ -->
    <root level="warn">
        <appender-ref ref="STDOUT" />
    </root>
</configuration>

